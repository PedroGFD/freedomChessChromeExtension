// Callback function to execute when mutations are observed for puzzlesvar puzzlesCallback = function(mutations) {    console.log("puzzlesCallback");    let newFenPosition = getPiecesToFEN();    console.log(newFenPosition);        // Start chessboard to follow the game on background    window['chess'] = new Chess(newFenPosition);    }// Callback function to execute when mutations are observedvar callback = function(mutations) {    // console.log("callback");        // check if game started    var hasTheGameAlreadyStarted = hasTheGameStarted();        // check if game is over    var isTheGameOver = isGameOver();        if ((freedomEnabled == true) && (hasTheGameAlreadyStarted == true) && (isTheGameOver == false)) {        // get player color        var playerColor = getPlayerColor();            // get moves count        window['movesMadeCount'] = getMovesCount();            // get last move made        var lastMoveMadeString = getLastMoveMade();        lastMoveMadeString = lastMoveMadeString.trim();                // last move made to speech        var spokenLastMoveMadeString = lastMoveMadeString;        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/T/, "Torre ");;        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/C/, "Cavalo ");        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/B/, "Bispo ");        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/D/, "Dama ");        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/R/, "Rei ");        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/O-O-O/, "Grande Roque ");        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/O-O/, "Roque ");        spokenLastMoveMadeString = spokenLastMoveMadeString.replace(/x/, " por ");                var makeTheMove = false;                if (pageType == 'daily') {            var checkButtonClicked = setInterval(function() {                if (confirmButtonClicked == true) {                    makeTheMove = true;                    clearInterval(checkButtonClicked);                    confirmButtonClicked = false;                }                else {                    makeTheMove = false;                }            }, 100); // check every 100ms        }        else {            makeTheMove = true;        }                if (makeTheMove == true) {            // make move on background            var englishLastMadeMoveString = lastMoveMadeString.replace(/C/, 'N');            englishLastMadeMoveString = englishLastMadeMoveString.replace(/D/, 'Q');            englishLastMadeMoveString = englishLastMadeMoveString.replace(/R/, 'K');            englishLastMadeMoveString = englishLastMadeMoveString.replace(/T/, 'R');            console.log(englishLastMadeMoveString);            console.log(chess.fen());            chess.move(englishLastMadeMoveString);        }                    // make the alert that move has been played        if (movesMadeCount %2 == 0) {            if (deficienteVisual == true) {                var speechMessage = "As Pretas jogaram " + spokenLastMoveMadeString + ", agora as Brancas jogam!";                                speech.text = speechMessage;                window.speechSynthesis.speak(speech);            }        }        else{            if (deficienteVisual == true) {                var speechMessage = "As Brancas jogaram " + spokenLastMoveMadeString + ", agora as Pretas jogam!";                speech.text = speechMessage;                window.speechSynthesis.speak(speech);            }        }    }    else {        window['observer'].disconnect();         Swal.fire({            icon: 'success',            title: "Destivado!",            text: "O modo Freedom foi desativado.",            showConfirmButton: false,            timer: 1500        });        freedomEnabled = false;    }   };// Create an observer instance linked to the callback functionwindow['observer'] = new MutationObserver(callback);// Create an observer instance linked to the callback function for Puzzleswindow['puzzlesObserver'] = new MutationObserver(puzzlesCallback);// Observe if moves list has changedfunction startObservingMoves() {    var movesPlayed = getMovesCount();                // in case we just started a game as black and expecting opponent to play    if(movesPlayed == 0) {        //The node we need does not exist yet.        //Wait 500ms and try again        window.setTimeout(function(){            startObservingMoves();        }, 500);        return;    }        // Select the node that will be observed for mutations    if (pageType == "live") {        var targetNode = document.querySelector(movesListBoxClass).firstChild;    }    else {        var targetNode = document.querySelector(movesListBoxClass);    }        // Options for the observer (which mutations to observe)    if (pageType == "play") {        var config = {        attributes: false,        childList: true,        subtree: true        };    }    else if (pageType == "analysis") {        var config = {        attributes: false,        childList: true,        subtree: false        };    }    else if (pageType == "daily") {        var config = {        attributes: false,        childList: true,        subtree: true        };    }    else if (pageType == "liveNoGame") {        var config = {        attributes: true,        childList: false,        subtree: false        };    }    else if (pageType == "liveGame") {        var config = {        attributes: true,        childList: false,        subtree: false        };    }    // Start observing the target node for configured mutations    observer.observe(targetNode, config);    // force the first callback     window["callback"]();   }// Observe if moves list has changedfunction startObservingMovesForPuzzles() {    var targetNode = document.querySelector('.board');            // Options for the observer (which mutations to observe)    var config = {        attributes: false,        childList: true,        subtree: true    };        // Start observing the target node for configured mutations    puzzlesObserver.observe(targetNode, config);    // force the first callback     window["puzzlesCallback"]();   }