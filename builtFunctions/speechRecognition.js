// Speech Recognitionconst calculateFunction = function(lance) {    // remove all spaces from move    lance = lance.replace(/ /g,'');    var passedMatchTestsForWhite = 0;    var passedMatchTestsForBlack = 0;        console.log(lance);    var legalMovesIfWhitesTurn = chessWhite.moves();    legalMovesIfWhitesTurn = legalMovesIfWhitesTurn.map(function(x){return x.replace(/#/, '');});    legalMovesIfWhitesTurn = legalMovesIfWhitesTurn.map(function(x){return x.replace(/=/, ' ');});    legalMovesIfWhitesTurn = legalMovesIfWhitesTurn.map(function(x){return x.replace(/\+/g, '');});    legalMovesIfWhitesTurn = legalMovesIfWhitesTurn.map(function(x){return x.replace(/  +/g, ' ');});    legalMovesIfWhitesTurn = legalMovesIfWhitesTurn.map(function(x){return x.trim();});                var legalMovesIfBlacksTurn = chessBlack.moves();    legalMovesIfBlacksTurn = legalMovesIfBlacksTurn.map(function(x){return x.replace(/#/, '');});    legalMovesIfBlacksTurn = legalMovesIfBlacksTurn.map(function(x){return x.replace(/=/, ' ');});    legalMovesIfBlacksTurn = legalMovesIfBlacksTurn.map(function(x){return x.replace(/\+/g, '');});    legalMovesIfBlacksTurn = legalMovesIfBlacksTurn.map(function(x){return x.replace(/  +/g, ' ');});    legalMovesIfBlacksTurn = legalMovesIfBlacksTurn.map(function(x){return x.trim();});        console.log(legalMovesIfWhitesTurn);        for (var move in legalMovesIfWhitesTurn) {        let levenshteinScore = similarity(lance, legalMovesIfWhitesTurn[move]);        let jaroWrinkerScore = JaroWrinker(lance, legalMovesIfWhitesTurn[move]);        console.log(lance, legalMovesIfWhitesTurn[move], levenshteinScore, jaroWrinkerScore);        if ( (levenshteinScore >= 0.95) && (jaroWrinkerScore >= 0.95) ) {            passedMatchTestsForWhite = 1;        }    }    for (var move in legalMovesIfBlacksTurn) {        let levenshteinScore = similarity(lance, legalMovesIfBlacksTurn[move]);        let jaroWrinkerScore = JaroWrinker(lance, legalMovesIfBlacksTurn[move]);        if ( (levenshteinScore >=0.95) && (jaroWrinkerScore >= 0.95) ) {            passedMatchTestsForBlack = 1;        }    }        if (passedMatchTestsForWhite == 1) {        chessWhite.move(lance);        var movesHistory = chessWhite.history({ verbose: true });        var lastHistoryMove = movesHistory[movesHistory.length -1];        var source = lastHistoryMove.from;        var destination = lastHistoryMove.to;        chessWhite.undo();        makeMove(source, destination);;     }    else if (passedMatchTestsForBlack == 1) {        chessBlack.move(lance);        var movesHistory = chessBlack.history({ verbose: true });        var lastHistoryMove = movesHistory[movesHistory.length -1];        var source = lastHistoryMove.from;        var destination = lastHistoryMove.to;        chessBlack.undo();        makeMove(source, destination);;     }    else {        console.log("Não passou");        // force callback to make sure position os being read correctly                    window["callback"]();       }}const commands = {        'deficiente visual': () => {             var deficienteVisualMessage = "Modo para Deficiencia Visual Ativado!"            speech.text = deficienteVisualMessage;            window.speechSynthesis.speak(speech);        },         'desativar': () => {            enableDisableFreedomMode();        },        'confirmar': () => {            if (pageType == "daily") {                document.querySelector('.ui_v5-button-component.ui_v5-button-primary').click();            }        },        'cancelar': () => {            if (pageType == "daily") {                document.querySelector('.ui_v5-button-component.ui_v5-button-basic').click();            }            if (document.querySelector('.promotion-window')) {                chess.undo();                console.log(document.querySelector('.close-button'));                document.querySelector('.close-button').click();            }        },        'dama': () => {            if (window['promotionQueen'] != null) {                window['promotionQueen'].click();            }        },        'bispo': () => {            if (window['promotionBishop'] != null) {                window['promotionBishop'].click();            }        },        'cavalo': () => {            if (window['promotionKnight'] != null) {                window['promotionKnight'].click();            }        },        'torre': () => {            if (window['promotionRook'] != null) {                window['promotionRook'].click();            }        },                // lances padrão        'dama :casa': {          'regexp': /^dama ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("Q"+casa.toLowerCase());}        },        'rei :casa': {          'regexp': /^rei ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("K"+casa.toLowerCase());}        },        'torre :casa': {          'regexp': /^torre ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("R"+casa.toLowerCase());}        },        'cavalo :casa': {          'regexp': /^cavalo ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("N"+casa.toLowerCase());}        },        'bispo :casa': {          'regexp': /^bispo ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("B"+casa.toLowerCase());}        },        ':casa': {          'regexp': /^([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction(casa.toLowerCase());}        },                // lances especiais        'dama :expr': {          'regexp': /^dama ([A-Ha-h]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("Q"+expr.toLowerCase());}        },        'dama :expr': {          'regexp': /^dama ([1-8]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("Q"+expr.toLowerCase());}        },        'torre :expr': {          'regexp': /^torre ([A-Ha-h]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("R"+expr.toLowerCase());}        },        'torre :expr': {          'regexp': /^torre ([1-8]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("R"+expr.toLowerCase());}        },        'cavalo :expr': {          'regexp': /^cavalo ([A-Ha-h]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("N"+expr.toLowerCase());}        },        'cavalo :expr': {          'regexp': /^cavalo ([1-8]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("N"+expr.toLowerCase());}        },        'bispo :expr': {          'regexp': /^bispo ([A-Ha-h]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("B"+expr.toLowerCase());}        },        'bispo :expr': {          'regexp': /^bispo ([1-8]\s?[A-Ha-h]\s?[1-8])/,          'callback': function(expr){calculateFunction("B"+expr.toLowerCase());}        },                // capturas        'dama por :casa': {          'regexp': /^dama por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("Qx"+casa.toLowerCase());}        },        'rei por :casa': {          'regexp': /^rei por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("Kx"+casa.toLowerCase());}        },        'torre por :casa': {          'regexp': /^torre por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("Rx"+casa.toLowerCase());}        },        'cavalo por :casa': {          'regexp': /^cavalo por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("Nx"+casa.toLowerCase());}        },        'bispo por :casa': {          'regexp': /^bispo por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("Bx"+casa.toLowerCase());}        },        'a por :casa': {          'regexp': /^a por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("ax"+casa.toLowerCase());}        },        'b por :casa': {          'regexp': /^b por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("bx"+casa.toLowerCase());}        },        'c por :casa': {          'regexp': /^c por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("cx"+casa.toLowerCase());}        },        'd por :casa': {          'regexp': /^d por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("dx"+casa.toLowerCase());}        },        'e por :casa': {          'regexp': /^e por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("ex"+casa.toLowerCase());}        },        'f por :casa': {          'regexp': /^f por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("fx"+casa.toLowerCase());}        },        'g por :casa': {          'regexp': /^g por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("gx"+casa.toLowerCase());}        },        'h por :casa': {          'regexp': /^h por ([A-Ha-h]\s?[1-8])/,          'callback': function(casa){calculateFunction("hx"+casa.toLowerCase());}        },                // capturas especiais        'dama :capt': {          'regexp': /^dama ([A-Ha-h] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("Q"+capt.replace(/ por /, "x").toLowerCase());}        },        'dama :capt': {          'regexp': /^dama ([1-8] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("Q"+capt.replace(/ por /, "x").toLowerCase());}        },        'torre :capt': {          'regexp': /^torre ([A-Ha-h] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("R"+capt.replace(/ por /, "x").toLowerCase());}        },        'torre :capt': {          'regexp': /^torre ([1-8] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("R"+capt.replace(/ por /, "x").toLowerCase());}        },        'cavalo :capt': {          'regexp': /^cavalo ([A-Ha-h] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("N"+capt.replace(/ por /, "x").toLowerCase());}        },        'cavalo :capt': {          'regexp': /^cavalo ([1-8] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("N"+capt.replace(/ por /, "x").toLowerCase());}        },        'bispo :capt': {          'regexp': /^bispo ([A-Ha-h] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("B"+capt.replace(/ por /, "x").toLowerCase());}        },        'bispo :capt': {          'regexp': /^bispo ([1-8] por [A-Ha-h]\s?[1-8])/,          'callback': function(capt){calculateFunction("B"+capt.replace(/ por /, "x").toLowerCase());}        },            };    annyang.addCommands(commands);annyang.addCallback('resultMatch', function(userSaid, commandText, phrases) {  console.log(userSaid); // sample output: 'hello'  console.log(commandText); // sample output: 'hello (there)'  console.log(phrases); // sample output: ['hello', 'halo', 'yellow', 'polo', 'hello kitty']});annyang.addCallback('resultNoMatch', function(possible_phrases) {    console.log(possible_phrases);});