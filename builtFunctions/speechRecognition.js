// Speech Recognitionwindow.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;window['recognition'] = new SpeechRecognition();recognition.interimResults = true;recognition.lang = 'pt-BR';recognition.onresult = function(e) {        var text = Array.from(e.results)      .map((result) => result[0])      .map((result) => result.transcript)      .join("");          if (e.results[0].isFinal) {            console.log("Original: " + text);            // ativar voz para lances do adversário        if (text.includes("deficiente visual")) {            window['deficienteVisual'] = true;            var deficienteVisualMessage = "Modo para Deficiencia Visual Ativado!"            speech.text = deficienteVisualMessage;            window.speechSynthesis.speak(speech);        }        else if (text.includes("desativar")) {            enableDisableFreedomMode();        }        else if ((text.includes("confirmar")) && (pageType == "daily")) {            document.querySelector('.ui_v5-button-component.ui_v5-button-primary').click();        }        else if ((text.includes("cancelar")) && (pageType == "daily")) {            document.querySelector('.ui_v5-button-component.ui_v5-button-basic').click();        }        else if ((text.includes("dama")) && (window['promotionQueen'] != null)) {            window['promotionQueen'].click();        }        else if ((text.includes("bispo")) && (window['promotionBishop'] != null)) {            window['promotionBishop'].click();        }        else if ((text.includes("cavalo")) && (window['promotionKnight'] != null)) {            window['promotionKnight'].click();        }        else if ((text.includes("torre")) && (window['promotionRook'] != null)) {            window['promotionRook'].click();        }        else if ((text.includes("cancelar")) && (document.querySelector('.promotion-window'))) {            console.log("Cancelaaaaar");            chess.undo();            console.log(document.querySelector('.close-button'));            document.querySelector('.close-button').click();        }                 else {                    // remove spaces if only square for pawn move            if (text.length <= 3) {                text = text.replace(/ +/g, "");            }                        // Roque            text = text.replace(/rock/, "roque");                        // replace for column C            text = text.replace(/cavalos e /i, "Cavalo c ");            text = text.replace(/torres e /i, "Torre c ");            text = text.replace(/bispos e /i, "Bispo c ");            text = text.replace(/damas e /i, "Dama c ");            text = text.replace(/rainhas e /i, "Dama c ");            text = text.replace(/reis e /i, "Rei c ");            text = text.replace(/61/, "c1");            text = text.replace(/62/, "c2");            text = text.replace(/63/, "c3");            text = text.replace(/64/, "c4");            text = text.replace(/65/, "c5");            text = text.replace(/66/, "c6");            text = text.replace(/67/, "c7");            text = text.replace(/68/, "c8");                        // replace for column D            text = text.replace(/ de /, " d ");            text = text.replace(/depor /, "d por ");            text = text.replace(/depois /, "d por ");                        // replace for column F            text = text.replace(/cavalete/, "Cavalo f");                        // replace for column B            text = text.replace(/^Bê/, "b");                        // replace for column C            text = text.replace(/^se /, "c ");                                    // replace Rainha for Dama            text = text.replace(/rainha /i, "Dama ");            text = text.replace(/deu uma /i, "Dama ");                                   // replace text for numbers            text = text.replace(/ um/, "1");            text = text.replace(/ dois/, "2");            text = text.replace(/ três/, "3");            text = text.replace(/ quatro/, "4");            text = text.replace(/ cinco/, "5");            text = text.replace(/ seis/, "6");            text = text.replace(/ sete/, "7");            text = text.replace(/ oito/, "8");                        // replace caps for lower for columns            if (text.match(/[A-Z]+\d/g)) {                let myRegexp = /[A-Z]+\d/g;                let match = myRegexp.exec(text);                text = text.replace(match[0], match[0].toLowerCase());            }                        // replace lower for caps for pieces            text = text.replace(/dama/, "Dama");            text = text.replace(/rainha/, "Dama");            text = text.replace(/torre/, "Torre");            text = text.replace(/cavalo/, "Cavalo");            text = text.replace(/bispo/, "Bispo");            text = text.replace(/rei/, "Rei");                                    // remove space between column and row            if (text.match(/[a-zA-Z]+\s\d/g)) {                let myRegexp = /[a-zA-Z]+\s\d/g;                let match = myRegexp.exec(text);                let alteredText = match[0].replace(/\s+/g, "");                text = text.replace(match[0], alteredText);            }                        // remove - between column and row            if (text.match(/[a-zA-Z]+\-\d/g)) {                let myRegexp = /[a-zA-Z]+\-\d/g;                let match = myRegexp.exec(text);                let alteredText = match[0].replace(/\-/g, "");                text = text.replace(match[0], alteredText);            }                                    var legalMoves = chess.moves();            legalMoves = legalMoves.map(function(x){return x.replace(/N/, 'Cavalo ');});            legalMoves = legalMoves.map(function(x){return x.replace(/R/, 'Torre ');});            legalMoves = legalMoves.map(function(x){return x.replace(/K/, 'Rei ');});            legalMoves = legalMoves.map(function(x){return x.replace(/Q/, 'Dama ');});            legalMoves = legalMoves.map(function(x){return x.replace(/B/, 'Bispo ');});            legalMoves = legalMoves.map(function(x){return x.replace(/x/, ' por ');});            legalMoves = legalMoves.map(function(x){return x.replace(/O-O-O/, 'Grande roque');});            legalMoves = legalMoves.map(function(x){return x.replace(/O-O/, 'Roque');});            legalMoves = legalMoves.map(function(x){return x.replace(/#/, '');});            legalMoves = legalMoves.map(function(x){return x.replace(/=/, ' ');});            legalMoves = legalMoves.map(function(x){return x.replace(/\+/g, '');});            legalMoves = legalMoves.map(function(x){return x.replace(/  +/g, ' ');});            legalMoves = legalMoves.map(function(x){return x.trim();});                                    console.log("Modificado: " + text);            console.log(legalMoves);            var bestMove = "";            var similarityReference = 0;                        for (var move in legalMoves) {                var stringsSimilarity = similarity(text, legalMoves[move]);                if (stringsSimilarity >= similarityReference) {                    similarityReference = stringsSimilarity;                    bestMove = legalMoves[move];                }            }            var indexForBestMove = legalMoves.indexOf(bestMove);                            if (similarityReference >= 0.9) {                //console.log(text);                //console.log(chosenMove);                 legalMoves = chess.moves();                var chosenMove = legalMoves[indexForBestMove];                    console.log(similarityReference);                 chess.move(chosenMove);                var movesHistory = chess.history({ verbose: true });                var lastHistoryMove = movesHistory[movesHistory.length -1];                source = lastHistoryMove.from;                destination = lastHistoryMove.to;                chess.undo();                makeMove(source, destination);                }            // if didn't pass Levenshtein distance similarity, lets try cosine similarity and JaroWrinker            else {                var cosineScoresArray = [];                var jaroWrinkerScoresArray = [];                                for (testMove in legalMoves) {                    cosineScoresArray.push(new Cosinesimilarity(text, legalMoves[testMove]));                    jaroWrinkerScoresArray.push(JaroWrinker(text, legalMoves[testMove]));                  }                                console.log(cosineScoresArray);                console.log(jaroWrinkerScoresArray);                                                            //console.log(text);                //console.log(chosenMove);                 console.log(similarityReference);                 //console.log(chess.fen());                // play beep sound                // Play beep                //let context = new (window.AudioContext || window.webkitAudioContext)();                //var osc = context.createOscillator(); // instantiate an oscillator                //osc.type = 'sine'; // this is the default - also square, sawtooth, triangle                //osc.frequency.value = 440; // Hz                //osc.connect(context.destination); // connect it to the destination                //osc.start(); // start the oscillator                // osc.stop(context.currentTime + 0.5); // stop 2 seconds after the current time            }         }     }};recognition.onend = function () {    if (freedomEnabled == true) {        recognition.start();    }    else {        recognition.stop();    }};