//https://medium.com/swlh/programming-a-chess-bot-for-chess-com-fa6bd7e1da76window.onload = () =>{    const button = document.createElement('button');    button.id = "freedomButton";    button.textContent = "e2-e4";    button.className = "freedomButtonClass"    if (document.querySelector('.layout-controls')) {        document.querySelector('.layout-controls').append(button);    }    if (document.querySelector('.board-layout-controls')){        document.querySelector('.board-layout-controls').append(button);        }    enableMouseCoordinatesDebug();    button.addEventListener('click', () => enableFreedomMode());}function observeMovesMade() {    var movesListBox = document.querySelector('.move-list.horizontal-move-list');    if(!movesListBox) {        //The node we need does not exist yet.        //Wait 500ms and try again        window.setTimeout(observeMovesMade,500);        return;    }  // Select the node that will be observed for mutations  var targetNode = document.querySelector('.move-list.horizontal-move-list');  // Options for the observer (which mutations to observe)  var config = {    attributes: false,    childList: true,    subtree: true  };  // Create an observer instance linked to the callback function  var observer = new MutationObserver(callback);  // Start observing the target node for configured mutations  observer.observe(targetNode, config);}// Callback function to execute when mutations are observedvar callback = function() {  var movesMade = document.querySelector('.move-list.horizontal-move-list').childElementCount;  if (movesMade %2 == 0) {      alert("Brancas jogam!");      return false;  }  else{      alert("Pretas jogam!");  }};function enableFreedomMode() {    // get board to get screen position and offsets and also square width    const gameBoard = document.querySelector('.board');    const offsetX = gameBoard.getBoundingClientRect().x;    const offsetY = gameBoard.getBoundingClientRect().y;    const squareWidth = gameBoard.getBoundingClientRect().width / 8;    const bubbles = true;        // dicionário de conversão de casa em coordenadas    var dict = {      "a": 1,      "b": 2,      "c": 3,      "d": 4,      "e": 5,      "f": 6,      "g": 7,      "h": 8    };        // source and destination squares    var source = "e2";    var destination = "e4";        // origin square click    var sourceColumn = source[0];    var sourceRow = source[1];    let clientX = squareWidth * (dict[sourceColumn] - 0.5) + offsetX;    let clientY = squareWidth * (8 + 0.5 - parseInt(sourceRow)) + offsetY;    let event = new PointerEvent('pointerdown', { clientX, clientY, bubbles });    gameBoard.dispatchEvent(event);        // destination square click     var destinationColumn = destination[0];    var destinationRow = destination[1];     clientX = squareWidth * (dict[destinationColumn] - 0.5) + offsetX;    clientY = squareWidth * (8 + 0.5 - parseInt(destinationRow)) + offsetY;       event = new PointerEvent('pointerup', { clientX, clientY, bubbles });    document.querySelector('html').dispatchEvent(event);         // observe if opponent made move    observeMovesMade();    }function enableMouseCoordinatesDebug() {    document.onmousemove = function(e){    var x = e.pageX;    var y = e.pageY;    e.target.title = "X is "+x+" and Y is "+y;    };}